generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================================================================
// NEXTAUTH MODELS - Gestion d'authentification
// ====================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?   // Avatar utilisateur (URL)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  quota         UserQuota?
  usageHistory  QuotaUsage[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ====================================================================
// QUOTA MANAGEMENT MODELS - Gestion des quotas utilisateurs
// ====================================================================

model UserQuota {
  id          String    @id @default(cuid())
  userId      String    @unique

  // Quotas journaliers
  dailyLimit  Int       @default(10)  // Limite par jour
  dailyUsed   Int       @default(0)   // Utilisé aujourd'hui
  lastReset   DateTime  @default(now()) // Dernière réinitialisation

  // Quotas mensuels (pour les plans premium)
  monthlyLimit Int?     // Limite mensuelle (null = illimité)
  monthlyUsed  Int      @default(0)
  monthReset   DateTime @default(now())

  // Plan et statut
  planType    PlanType  @default(FREE)
  isActive    Boolean   @default(true)

  // Métadonnées
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_quotas")
}

model QuotaUsage {
  id         String   @id @default(cuid())
  userId     String

  // Tracking de l'utilisation
  ipAddress  String   // IP pour les utilisateurs non connectés
  userAgent  String?  // Navigateur/app

  // Métadonnées de l'image
  fileSize   Int?     // Taille du fichier traité
  fileType   String?  // Type MIME (image/jpeg, etc.)

  // Temps de traitement
  processingTimeMs Int? // Temps de traitement en ms

  // Timestamps
  usedAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quota_usage")
  @@index([userId, usedAt])
  @@index([usedAt]) // Pour les statistiques globales
}

// ====================================================================
// ENUMS
// ====================================================================

enum PlanType {
  FREE        // 10/jour
  PREMIUM     // 100/jour + 1000/mois
  ENTERPRISE  // Illimité (pour plus tard)
}
